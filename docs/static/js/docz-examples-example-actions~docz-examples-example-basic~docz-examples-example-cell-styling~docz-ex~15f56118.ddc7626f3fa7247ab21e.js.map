{"version":3,"sources":["webpack:///./src/filter-actions.js","webpack:///./src/m-table-filter-row.js","webpack:///./src/m-table-cell.js","webpack:///./src/m-table-actions.js","webpack:///./src/m-table-body-row.js","webpack:///./src/m-table-body.js","webpack:///./src/m-table-header.js","webpack:///./src/m-table-pagination.js","webpack:///./src/m-table-toolbar.js","webpack:///./src/material-table.js"],"names":["filter_actions","options","a","selection","isRowAction","isFreeAction","isSelectedAction","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","MTableFilterRow","columnDef","react","index_es","multiple","value","tableData","filterValue","onChange","event","_this","props","onFilterChanged","id","target","input","renderValue","selecteds","map","selected","lookup","join","Object","keys","key","checked","indexOf","toString","primary","indeterminate","undefined","val","type","float","InputProps","startAdornment","position","dateInputElement","onDateInputChange","date","DatePicker_default","clearable","DateTimePicker_default","TimePicker_default","MuiPickersUtilsProvider_default","utils","DateFnsUtils","field","this","renderLookupFilter","renderBooleanFilter","includes","renderDateTypeFilter","renderDefaultFilter","_this2","columns","getComponentForColumn","splice","padding","onFilterSelectionChanged","emptyCell","hasActions","actionsColumnIndex","push","endPos","height","React","defaultProps","MTableCell","render","rowData","textAlign","Date","toLocaleDateString","toLocaleTimeString","toLocaleString","getCurrencyValue","currencySetting","Intl","NumberFormat","locale","currency","currencyCode","minimumFractionDigits","maximumFractionDigits","format","cellStyle","objectSpread_default","numeric","getRenderValue","MTableActions","action","index","data","button","icon","disabled","onClick","iconProps","tooltip","title","actions","renderButton","MTableBodyRow","filter","hidden","getFieldValue","m_table_cell_MTableCell","paddingTop","paddingBottom","display","m_table_actions","filterActions","concat","onRowSelected","renderColumns","renderSelectionColumn","length","renderActions","MTableBody","emptyRowCount","renderData","showEmptyDataSourceMessage","paging","pageSize","colSpan","localization","emptyDataSourceMessage","toConsumableArray_default","Array","r","startIndex","currentPage","endIndex","slice","filtering","m_table_filter_row","m_table_body_row_MTableBodyRow","renderEmpty","MTableHeader","sort","sorting","active","orderBy","direction","orderDirection","onOrderChange","selectedCount","dataCount","onAllSelected","headers","renderHeader","hasSelection","renderSelectionHeader","showActionsColumn","actionsHeaderIndex","renderActionsHeader","MTablePaginationInner","onChangePage","page","Math","max","ceil","count","rowsPerPage","_this$props","classes","className","root","handleFirstPageButtonClick","aria-label","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","MTablePagination","withStyles","theme","flexShrink","color","palette","text","secondary","marginLeft","spacing","unit","withTheme","MTableToolbar","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","call","defineProperty_default","assertThisInitialized_default","CsvBuilder","setColumns","addRows","exportFile","setState","exportButtonAnchorEl","state","columnsButtonAnchorEl","search","searchText","onSearchChanged","columnsButton","currentTarget","anchorEl","open","Boolean","onClose","col","label","control","onColumnsChanged","exportButton","exportCsv","selectedRows","renderDefaultActions","nRowsSelected","replace","classNames","highlight","variant","spacer","paddingRight","main","backgroundColor","lighten","light","dark","flex","MaterialTable","getProps","row","filterSelectionChecked","forEach","currentDate","selectedDate","currentDateToCompare","selectedDateToCompare","formatDate","currentHour","selectedHour","toUpperCase","result","searchable","find","_","b","onSelectionChange","apply","arguments","_this$props2","onChangeRowsPerPage","_this$props3","calculatedProps","defaultSortColumnIndex","defaultSortDirection","findIndex","defaultSort","getDataAndColumns","nextProps","dataAndColumns","getRenderData","rowsPerPageOptions","pageSizeOptions","setData","ActionsComponent","_this3","toolbar","m_table_toolbar","overflowX","m_table_header","m_table_body_MTableBody","columnId","renderFooter"],"mappings":"smCACeA,EAAA,SAAAC,GAAO,OAAI,SAAAC,GACtB,OAAID,EAAQE,UACDD,EAAEE,aAEAF,EAAEG,eAAiBH,EAAEI,kBAAsBJ,EAAEE,iYCYxDG,EAAY,CAChBC,WAAY,CACVC,MAAO,CACLC,UAAWC,IACXC,MAAO,OAKPC,yNACiB,SAACC,GAAD,OACnBC,EAAA,cAACC,EAAA,EAAD,CAAaP,MAAO,CAAEG,MAAO,SAC3BG,EAAA,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,MAAOJ,EAAUK,UAAUC,aAAe,GAC1CC,SAAU,SAAAC,GACRC,EAAKC,MAAMC,gBAAgBX,EAAUK,UAAUO,GAAIJ,EAAMK,OAAOT,QAElEU,MAAOb,EAAA,cAACC,EAAA,EAAD,CAAOU,GAAG,6BACjBG,YAAa,SAAAC,GAAS,OAAIA,EAAUC,IAAI,SAAAC,GAAQ,OAAIlB,EAAUmB,OAAOD,KAAWE,KAAK,OACrF3B,UAAWA,GAGT4B,OAAOC,KAAKtB,EAAUmB,QAAQF,IAAI,SAAAM,GAAG,OACnCtB,EAAA,cAACC,EAAA,EAAD,CAAUqB,IAAKA,EAAKnB,MAAOmB,GACzBtB,EAAA,cAACC,EAAA,EAAD,CAAUsB,QAASxB,EAAUK,UAAUC,aAAeN,EAAUK,UAAUC,YAAYmB,QAAQF,EAAIG,aAAe,IACjHzB,EAAA,cAACC,EAAA,EAAD,CAAcyB,QAAS3B,EAAUmB,OAAOI,kDAQ9B,SAACvB,GAAD,OACpBC,EAAA,cAACC,EAAA,EAAD,CACE0B,mBAAmDC,IAApC7B,EAAUK,UAAUC,YACnCkB,QAA6C,YAApCxB,EAAUK,UAAUC,YAC7BC,SAAU,WACR,IAAIuB,OACoCD,IAApC7B,EAAUK,UAAUC,YACtBwB,EAAM,UACuC,YAApC9B,EAAUK,UAAUC,cAC7BwB,EAAM,aAGRrB,EAAKC,MAAMC,gBAAgBX,EAAUK,UAAUO,GAAIkB,8CAKnC,SAAC9B,GAAD,OACpBC,EAAA,cAACC,EAAA,EAAD,CACEP,MAA0B,YAAnBK,EAAU+B,KAAqB,CAAEC,MAAO,SAAY,GAC3DD,KAAyB,YAAnB/B,EAAU+B,KAAqB,SAAW,OAChD3B,MAAOJ,EAAUK,UAAUC,YAC3BC,SAAU,SAACC,GAAYC,EAAKC,MAAMC,gBAAgBX,EAAUK,UAAUO,GAAIJ,EAAMK,OAAOT,QACvF6B,WAAY,CACVC,eACEjC,EAAA,cAACC,EAAA,EAAD,CAAgBiC,SAAS,SACvBlC,EAAA,cAACC,EAAA,EAAD,iEAOa,SAACF,GACtB,IAAIoC,EAAmB,KACjBC,EAAoB,SAAAC,GAAI,OAAI7B,EAAKC,MAAMC,gBAAgBX,EAAUK,UAAUO,GAAI0B,IA4BrF,MA1BuB,SAAnBtC,EAAU+B,KACZK,EACEnC,EAAA,cAACsC,EAAAnD,EAAD,CACEgB,MAAOJ,EAAUK,UAAUC,aAAe,KAC1CC,SAAU8B,EACVG,WAAS,IAGe,aAAnBxC,EAAU+B,KACnBK,EACEnC,EAAA,cAACwC,EAAArD,EAAD,CACEgB,MAAOJ,EAAUK,UAAUC,aAAe,KAC1CC,SAAU8B,EACVG,WAAS,IAGe,SAAnBxC,EAAU+B,OACnBK,EACEnC,EAAA,cAACyC,EAAAtD,EAAD,CACEgB,MAAOJ,EAAUK,UAAUC,aAAe,KAC1CC,SAAU8B,EACVG,WAAS,KAMbvC,EAAA,cAAC0C,EAAAvD,EAAD,CAAyBwD,MAAOC,KAC7BT,0EAKepC,GACpB,GAAIA,EAAU8C,MACZ,OAAI9C,EAAUmB,OACL4B,KAAKC,mBAAmBhD,GACH,YAAnBA,EAAU+B,KACZgB,KAAKE,oBAAoBjD,GACvB,CAAC,OAAQ,WAAY,QAAQkD,SAASlD,EAAU+B,MAClDgB,KAAKI,qBAAqBnD,GAE1B+C,KAAKK,oBAAoBpD,oCAK7B,IAAAqD,EAAAN,KACDO,EAAUP,KAAKrC,MAAM4C,QAAQrC,IAAI,SAAAjB,GAAS,OAC9CC,EAAA,cAACC,EAAA,EAAD,CAAWqB,IAAKvB,EAAUK,UAAUO,IACjCyC,EAAKE,sBAAsBvD,MAWhC,GAPI+C,KAAKrC,MAAMrB,WACbiE,EAAQE,OAAO,EAAG,EAChBvD,EAAA,cAACC,EAAA,EAAD,CAAWP,MAAO,CAAE8D,QAAS,WAC3BxD,EAAA,cAACC,EAAA,EAAD,CAAUK,SAAUwC,KAAKrC,MAAMgD,6BAIjCX,KAAKrC,MAAMiD,WAAaZ,KAAKrC,MAAMkD,WACrC,IAAuC,IAAnCb,KAAKrC,MAAMmD,mBACbP,EAAQQ,KAAK7D,EAAA,cAACC,EAAA,EAAD,WACR,CACL,IAAI6D,EAAS,EACThB,KAAKrC,MAAMrB,YACb0E,EAAS,GAEXT,EAAQE,OAAOT,KAAKrC,MAAMmD,mBAAqBE,EAAQ,EAAG9D,EAAA,cAACC,EAAA,EAAD,OAI9D,OACED,EAAA,cAACC,EAAA,EAAD,CAAUP,MAAO,CAAEqE,OAAQ,KACxBV,UAzIqBW,aA+I9BlE,EAAgBmE,aAAe,CAC7BP,WAAW,EACXL,QAAS,GACTjE,WAAW,EACXuE,YAAY,GAaC7D,4sCCpLMoE,mJAEjB,GAAIpB,KAAKrC,MAAMV,UAAUoE,OACvB,OAAOrB,KAAKrC,MAAMV,UAAUoE,OAAOrB,KAAKrC,MAAM2D,SACzC,GAAkC,YAA9BtB,KAAKrC,MAAMV,UAAU+B,KAAoB,CAClD,IAAMpC,EAAQ,CAAE2E,UAAW,SAAUxE,MAAO,QAC5C,OAAIiD,KAAKrC,MAAMN,MACNH,EAAA,cAACC,EAAA,EAAD,CAAMP,MAAOA,GAAb,SAEAM,EAAA,cAACC,EAAA,EAAD,CAAMP,MAAOA,GAAb,UAEJ,MAAkC,SAA9BoD,KAAKrC,MAAMV,UAAU+B,KAC1BgB,KAAKrC,MAAMN,iBAAiBmE,KACvBxB,KAAKrC,MAAMN,MAAMoE,qBAEjBzB,KAAKrC,MAAMN,MAEmB,SAA9B2C,KAAKrC,MAAMV,UAAU+B,KAC1BgB,KAAKrC,MAAMN,iBAAiBmE,KACvBxB,KAAKrC,MAAMN,MAAMqE,qBAEjB1B,KAAKrC,MAAMN,MAEmB,aAA9B2C,KAAKrC,MAAMV,UAAU+B,KAC1BgB,KAAKrC,MAAMN,iBAAiBmE,KACvBxB,KAAKrC,MAAMN,MAAMsE,iBAEjB3B,KAAKrC,MAAMN,MAEmB,aAA9B2C,KAAKrC,MAAMV,UAAU+B,KACvBgB,KAAK4B,iBAAiB5B,KAAKrC,MAAMV,UAAU4E,gBAAiB7B,KAAKrC,MAAMN,OAGzE2C,KAAKrC,MAAMN,+CAGHwE,EAAiBxE,GAChC,YAAwByB,IAApB+C,EACK,IAAIC,KAAKC,kBAAyCjD,IAA3B+C,EAAgBG,OAAwBH,EAAgBG,OAAS,QAC7F,CACEpF,MAAO,WACPqF,cAA4CnD,IAAjC+C,EAAgBK,aAA8BL,EAAgBK,aAAe,MACxFC,2BAAkErD,IAA1C+C,EAAgBM,sBAAuCN,EAAgBM,sBAAwB,EACvHC,2BAAkEtD,IAA1C+C,EAAgBO,sBAAuCP,EAAgBO,sBAAwB,IACtHC,YAAkBvD,IAAVzB,EAAuBA,EAAQ,GAErC,IAAIyE,KAAKC,aAAa,QAAS,CAAEnF,MAAO,WAAYqF,SAAU,QAASI,YAAkBvD,IAAVzB,EAAuBA,EAAQ,oCAKvH,IAAIiF,EAAY,GAOhB,OALEA,EAD4C,oBAAnCtC,KAAKrC,MAAMV,UAAUqF,UACrBC,IAAA,GAAQD,EAActC,KAAKrC,MAAMV,UAAUqF,UAAUtC,KAAKrC,MAAMN,QAEhEkF,IAAA,GAAQD,EAActC,KAAKrC,MAAMV,UAAUqF,WAIpDpF,EAAA,cAACC,EAAA,EAAD,CAAWP,MAAO0F,EAChBE,SAA6D,IAApD,CAAC,WAAW9D,QAAQsB,KAAKrC,MAAMV,UAAU+B,OAEjDgB,KAAKyC,yBA9D0BvB,aAoExCE,EAAWD,aAAe,CACxBlE,UAAW,GACXI,MAAO,2hBCtEHqF,+IACSC,EAAQC,GAAO,IAAAlF,EAAAsC,KAC1B,GAAsB,oBAAX2C,KACTA,EAASA,EAAO3C,KAAKrC,MAAMkF,OAEzB,OAAO,KAIX,IAAMC,EACJ5F,EAAA,cAACC,EAAA,EAAD,CACEqB,IAAKmE,EAAOI,KAAO,GAAKH,EACxBI,SAAUL,EAAOK,SACjBC,QAAS,SAACxF,GAAD,OAAWkF,EAAOM,SAAWN,EAAOM,QAAQxF,EAAOC,EAAKC,MAAMkF,QAEvE3F,EAAA,cAACC,EAAA,EAASwF,EAAOO,UAAYP,EAAOI,OAIxC,OAAIJ,EAAOQ,UAAYR,EAAOK,SACrB9F,EAAA,cAACC,EAAA,EAAD,CAASiG,MAAOT,EAAOQ,QAAS3E,IAAKmE,EAAOQ,QAAU,GAAKP,GAAQE,GAEnEA,mCAIF,IAAAxC,EAAAN,KACP,OAAIA,KAAKrC,MAAM0F,QACNrD,KAAKrC,MAAM0F,QAAQnF,IAAI,SAACyE,EAAQC,GAAT,OAAoBtC,EAAKgD,aAAaX,EAAQC,KAGvE,YA/BiB1B,aAmC5BwB,EAAcvB,aAAe,CAC3BkC,QAAS,GACTR,KAAM,IAQOH,8cCzCMa,kJACH,IAAA7F,EAAAsC,KAMd,OALeA,KAAKrC,MAAM4C,QAAQiD,OAAO,SAAAvG,GAAe,OAAQA,EAAUwG,SACvEvF,IAAI,SAACjB,GACJ,IAAMI,EAAQK,EAAKC,MAAM+F,cAAchG,EAAKC,MAAMkF,KAAM5F,GACxD,OAAOC,EAAA,cAACyG,EAAD,CAAY1G,UAAWA,EAAWI,MAAOA,EAAOmB,IAAKvB,EAAUK,UAAUO,GAAIyD,QAAS5D,EAAKC,MAAMkF,iDAM5G,OACE3F,EAAA,cAACC,EAAA,EAAD,CAAWP,MAAO,CAAEgH,WAAY,EAAGC,cAAe,GAAKrF,IAAI,sBACzDtB,EAAA,qBAAKN,MAAO,CAAEkH,QAAS,SACrB5G,EAAA,cAAC6G,EAAD,CAAelB,KAAM7C,KAAKrC,MAAMkF,KAAMQ,QAASrD,KAAKrC,MAAM0F,QAAQG,OAAOQ,EAAchE,KAAKrC,MAAMvB,8DAMxG,OACEc,EAAA,cAACC,EAAA,EAAD,CAAWuD,QAAQ,WAAWlC,IAAI,wBAChCtB,EAAA,cAACC,EAAA,EAAD,CACEsB,SAA+C,IAAtCuB,KAAKrC,MAAMkF,KAAKvF,UAAUmB,QACnCpB,MAAK,GAAA4G,OAAKjE,KAAKrC,MAAMkF,KAAKvF,UAAUO,IACpCL,SAAUwC,KAAKrC,MAAMuG,kDAM3B,IAAM3D,EAAUP,KAAKmE,gBAIrB,GAHInE,KAAKrC,MAAMvB,QAAQE,WACrBiE,EAAQE,OAAO,EAAG,EAAGT,KAAKoE,yBAExBpE,KAAKrC,MAAM0F,SACbrD,KAAKrC,MAAM0F,QAAQG,OAAOQ,EAAchE,KAAKrC,MAAMvB,UAAUiI,OAAS,EACtE,IAA+C,IAA3CrE,KAAKrC,MAAMvB,QAAQ0E,mBACrBP,EAAQQ,KAAKf,KAAKsE,sBACb,GAAItE,KAAKrC,MAAMvB,QAAQ0E,oBAAsB,EAAG,CACrD,IAAIE,EAAS,EACThB,KAAKrC,MAAMvB,QAAQE,YACrB0E,EAAS,GAEXT,EAAQE,OAAOT,KAAKrC,MAAMvB,QAAQ0E,mBAAqBE,EAAQ,EAAGhB,KAAKsE,iBAG3E,OACEpH,EAAA,cAACC,EAAA,EAAD,CAAUgB,SAAU6B,KAAKrC,MAAMiF,MAAQ,IAAM,GAC1CrC,UAjDkCW,aAuD3CqC,EAAcpC,aAAe,CAC3BkC,QAAS,GACTT,MAAO,EACPC,KAAM,GACNzG,QAAS,u2BC5DUmI,8IACPC,EAAeC,GACzB,OAAIzE,KAAKrC,MAAMvB,QAAQsI,4BAAoD,IAAtBD,EAAWJ,OAE5DnH,EAAA,cAACC,EAAA,EAAD,CAAUP,MAAO,CAAEqE,OAAQ,IAAMjB,KAAKrC,MAAMvB,QAAQuI,OAAS3E,KAAKrC,MAAMiH,SAAW,IAAMpG,IAAK,WAC5FtB,EAAA,cAACC,EAAA,EAAD,CAAWP,MAAO,CAAEgH,WAAY,EAAGC,cAAe,EAAGtC,UAAW,UAAYsD,QAAS7E,KAAKrC,MAAM4C,QAAQ8D,OAAQ7F,IAAI,UACjHwB,KAAKrC,MAAMmH,aAAaC,yBAM7B7H,EAAA,cAACA,EAAA,SAAD,KACG8H,IAAIC,MAAMT,IAAgBtG,IAAI,SAACgH,EAAGtC,GAAJ,OAAc1F,EAAA,cAACC,EAAA,EAAD,CAAUP,MAAO,CAAEqE,OAAQ,IAAMzC,IAAK,SAAWoE,MAC7F4B,EAAgB,GAAKtH,EAAA,cAACC,EAAA,EAAD,CAAUP,MAAO,CAAEqE,OAAQ,GAAKzC,IAAK,kDAM1D,IAAAd,EAAAsC,KACHyE,EAAazE,KAAKrC,MAAM8G,WACxBD,EAAgB,EACpB,GAAIxE,KAAKrC,MAAMvB,QAAQuI,OAAQ,CAC7B,IAAMQ,EAAanF,KAAKrC,MAAMyH,YAAcpF,KAAKrC,MAAMiH,SACjDS,EAAWF,EAAanF,KAAKrC,MAAMiH,SACzCH,EAAaA,EAAWa,MAAMH,EAAYE,GAC1Cb,EAAgBxE,KAAKrC,MAAMiH,SAAWH,EAAWJ,OAEnD,OACEnH,EAAA,cAACC,EAAA,EAAD,KACG6C,KAAKrC,MAAMvB,QAAQmJ,WAClBrI,EAAA,cAACsI,EAAD,CACEjF,QAASP,KAAKrC,MAAM4C,QAAQiD,OAAO,SAAAvG,GAAe,OAAQA,EAAUwG,SACpE7C,UAAWZ,KAAKrC,MAAMvB,QAAQE,WAAc0D,KAAKrC,MAAM0F,SAAWrD,KAAKrC,MAAM0F,QAAQG,OAAOQ,EAAchE,KAAKrC,MAAMvB,UAAUiI,OAAS,EACxIxD,WAAab,KAAKrC,MAAM0F,SAAWrD,KAAKrC,MAAM0F,QAAQG,OAAOQ,EAAchE,KAAKrC,MAAMvB,UAAUiI,OAAS,EACzGvD,mBAAoBd,KAAKrC,MAAMvB,QAAQ0E,mBACvClD,gBAAiBoC,KAAKrC,MAAMC,gBAC5BtB,UAAW0D,KAAKrC,MAAMvB,QAAQE,UAC9BqE,yBAA0BX,KAAKrC,MAAMgD,2BAIvC8D,EAAWvG,IAAI,SAAC2E,EAAMD,GACpB,OACE1F,EAAA,cAACuI,EAAD,CACE5C,KAAMA,EACND,MAAOA,EACPpE,IAAKoE,EACLxG,QAASsB,EAAKC,MAAMvB,QACpB8H,cAAexG,EAAKC,MAAMuG,cAC1Bb,QAAS3F,EAAKC,MAAM0F,QACpB9C,QAAS7C,EAAKC,MAAM4C,QACpBmD,cAAehG,EAAKC,MAAM+F,kBAKjC1D,KAAK0F,YAAYlB,EAAeC,WA1DDvD,aAgExCqD,EAAWpD,aAAe,CACxBkC,QAAS,GACT+B,YAAa,EACbR,SAAU,EACVH,WAAY,GACZnI,WAAW,EACXwI,aAAc,4pCCtEVa,iJACW,IAAAjI,EAAAsC,KAsBb,OArBeA,KAAKrC,MAAM4C,QAAQiD,OAAO,SAAAvG,GAAe,OAAQA,EAAUwG,SACvEvF,IAAI,SAACjB,GAAD,OACHC,EAAA,cAACC,EAAA,EAAD,CACEqB,IAAKvB,EAAUK,UAAUO,GACzB2E,SAAkD,IAAzC,CAAC,WAAW9D,QAAQzB,EAAU+B,QAElB,IAAnB/B,EAAU2I,OAAwC,IAAtB3I,EAAU4I,SAAqBnI,EAAKC,MAAMkI,QACpE3I,EAAA,cAACC,EAAA,EAAD,CACA2I,OAAQpI,EAAKC,MAAMoI,UAAY9I,EAAUK,UAAUO,GACnDmI,UAAWtI,EAAKC,MAAMsI,gBAAkB,MACxChD,QAAS,WACP,IAAMgD,EAAiBhJ,EAAUK,UAAUO,KAAOH,EAAKC,MAAMoI,QAAU,MAAsC,QAA9BrI,EAAKC,MAAMsI,eAA2B,OAAS,MAC9HvI,EAAKC,MAAMuI,cAAcjJ,EAAUK,UAAUO,GAAIoI,KAGlDhJ,EAAUmG,OAEXnG,EAAUmG,uDAQpB,OACElG,EAAA,cAACC,EAAA,EAAD,CAAWqB,IAAI,sBACbtB,EAAA,cAACC,EAAA,EAAD,KAAiB6C,KAAKrC,MAAMmH,aAAazB,0DAIvB,IAAA/C,EAAAN,KACtB,OACE9C,EAAA,cAACC,EAAA,EAAD,CAAWuD,QAAQ,WAAWlC,IAAI,wBAChCtB,EAAA,cAACC,EAAA,EAAD,CACE0B,cAAemB,KAAKrC,MAAMwI,cAAgB,GAAKnG,KAAKrC,MAAMwI,cAAgBnG,KAAKrC,MAAMyI,UACrF3H,QAASuB,KAAKrC,MAAMwI,gBAAkBnG,KAAKrC,MAAMyI,UACjD5I,SAAU,SAACC,EAAOgB,GAAR,OAAoB6B,EAAK3C,MAAM0I,eAAiB/F,EAAK3C,MAAM0I,cAAc5H,wCAMzF,IAAM6H,EAAUtG,KAAKuG,eAKrB,GAJIvG,KAAKrC,MAAM6I,cACbF,EAAQ7F,OAAO,EAAG,EAAGT,KAAKyG,yBAGxBzG,KAAKrC,MAAM+I,kBACb,GAAI1G,KAAKrC,MAAMgJ,oBAAsB,EAAG,CACtC,IAAI3F,EAAS,EACThB,KAAKrC,MAAM6I,eACbxF,EAAS,GAEXsF,EAAQ7F,OAAOT,KAAKrC,MAAMgJ,mBAAqB3F,EAAQ,EAAGhB,KAAK4G,4BACnB,IAAnC5G,KAAKrC,MAAMgJ,oBACpBL,EAAQvF,KAAKf,KAAK4G,uBAItB,OACE1J,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,KACGmJ,WAjEgBpF,aAwE3ByE,EAAaxE,aAAe,CAC1BiF,UAAW,EACXI,cAAc,EACdL,cAAe,EACfN,SAAS,EACTf,aAAc,GACdiB,aAASjH,EACTmH,eAAgB,MAChBU,mBAAoB,GAkBPhB,45CCjGTkB,iOACyB,SAAApJ,GAC3BC,EAAKC,MAAMmJ,aAAarJ,EAAO,6CAGT,SAAAA,GACtBC,EAAKC,MAAMmJ,aAAarJ,EAAOC,EAAKC,MAAMoJ,KAAO,6CAG3B,SAAAtJ,GACtBC,EAAKC,MAAMmJ,aAAarJ,EAAOC,EAAKC,MAAMoJ,KAAO,iDAGvB,SAAAtJ,GAC1BC,EAAKC,MAAMmJ,aACTrJ,EACAuJ,KAAKC,IAAI,EAAGD,KAAKE,KAAKxJ,EAAKC,MAAMwJ,MAAQzJ,EAAKC,MAAMyJ,aAAe,8DAI9D,IAAAC,EACuCrH,KAAKrC,MAA3C2J,EADDD,EACCC,QAASH,EADVE,EACUF,MAAOJ,EADjBM,EACiBN,KAAMK,EADvBC,EACuBD,YAE9B,OACElK,EAAA,qBAAKqK,UAAWD,EAAQE,MACtBtK,EAAA,cAACC,EAAA,EAAD,CACE8F,QAASjD,KAAKyH,2BACdzE,SAAmB,IAAT+D,EACVW,aAAW,cAEXxK,EAAA,cAACC,EAAA,EAAD,oBAEFD,EAAA,cAACC,EAAA,EAAD,CACE8F,QAASjD,KAAK2H,sBACd3E,SAAmB,IAAT+D,EACVW,aAAW,iBAEXxK,EAAA,cAACC,EAAA,EAAD,sBAEFD,EAAA,cAACC,EAAA,EAAD,CACE8F,QAASjD,KAAK4H,sBACd5E,SAAU+D,GAAQC,KAAKE,KAAKC,EAAQC,GAAe,EACnDM,aAAW,aAEXxK,EAAA,cAACC,EAAA,EAAD,uBAEFD,EAAA,cAACC,EAAA,EAAD,CACE8F,QAASjD,KAAK6H,0BACd7E,SAAU+D,GAAQC,KAAKE,KAAKC,EAAQC,GAAe,EACnDM,aAAW,aAEXxK,EAAA,cAACC,EAAA,EAAD,2BAnD0B+D,aA4ErB4G,EAFUC,qBAhBH,SAAAC,GAAK,MAAK,CAC9BR,KAAM,CACJS,WAAY,EACZC,MAAOF,EAAMG,QAAQC,KAAKC,UAC1BC,WAAiC,IAArBN,EAAMO,QAAQC,QAYqB,CAAEC,WAAW,GAAvCV,CAA+ClB,+8BCrElE6B,cACJ,SAAAA,EAAY/K,GAAO,IAAAD,EAAA,OAAAiL,IAAA3I,KAAA0I,GACjBhL,EAAAkL,IAAA5I,KAAA6I,IAAAH,GAAAI,KAAA9I,KAAMrC,IADWoL,IAAAC,QAAAtL,IAAA,YAQP,WACV,IAAM6C,EAAU7C,EAAKC,MAAM4C,QACxBiD,OAAO,SAAAvG,GACN,OAAQA,EAAUwG,QAAUxG,EAAU8C,QAGpC8C,EAAOnF,EAAKC,MAAM8G,WAAWvG,IAAI,SAAAoD,GAAO,OAC5Cf,EAAQrC,IAAI,SAAAjB,GAAS,OAAIqE,EAAQrE,EAAU8C,WAG7B,IAAIkJ,cAAYvL,EAAKC,MAAMyF,OAAS,QAAU,QAC3D8F,WAAW3I,EAAQrC,IAAI,SAAAjB,GAAS,OAAIA,EAAUmG,SAC9C+F,QAAQtG,GACRuG,aAEH1L,EAAK2L,SAAS,CAAEC,qBAAsB,SArBtC5L,EAAK6L,MAAQ,CACXC,sBAAuB,KACvBF,qBAAsB,MAJP5L,sEA0BI,IAAA4C,EAAAN,KACrB,OACE9C,EAAA,yBACG8C,KAAKrC,MAAM8L,QACVvM,EAAA,cAACC,EAAA,EAAD,CACEE,MAAO2C,KAAKrC,MAAM+L,WAClBlM,SAAU,SAAAC,GAAK,OAAI6C,EAAK3C,MAAMgM,gBAAgBlM,EAAMK,OAAOT,QAC3D6B,WAAY,CACVC,eACEjC,EAAA,cAACC,EAAA,EAAD,CAAgBiC,SAAS,SACvBlC,EAAA,cAACC,EAAA,EAAD,mBAMT6C,KAAKrC,MAAMiM,eACV1M,EAAA,0BACEA,EAAA,cAACC,EAAA,EAAD,CAASiG,MAAM,gBACblG,EAAA,cAACC,EAAA,EAAD,CACE8F,QAAS,SAAAxF,GAAK,OAAI6C,EAAK+I,SAAS,CAAEG,sBAAuB/L,EAAMoM,iBAC/DnC,aAAW,gBACXxK,EAAA,cAACC,EAAA,EAAD,sBAGJD,EAAA,cAACC,EAAA,EAAD,CACE2M,SAAU9J,KAAKuJ,MAAMC,sBACrBO,KAAMC,QAAQhK,KAAKuJ,MAAMC,uBACzBS,QAAS,kBAAM3J,EAAK+I,SAAS,CAAEG,sBAAuB,SAEpDxJ,KAAKrC,MAAM4C,QAAQrC,IAAI,SAACgM,EAAKtH,GAC3B,OACE1F,EAAA,cAACC,EAAA,EAAD,CAAUqB,IAAK0L,EAAI5M,UAAUO,IAC3BX,EAAA,cAACC,EAAA,EAAD,CACEgN,MAAOD,EAAI9G,MACXgH,QACElN,EAAA,cAACC,EAAA,EAAD,CACEsB,SAAUyL,EAAIzG,OACdjG,SAAU,SAACC,EAAOgB,GAChB,IAAM8B,EAAUD,EAAK3C,MAAM4C,QAC3BA,EAAQqC,GAAOa,QAAUhF,EACzB6B,EAAK3C,MAAM0M,iBAAiB9J,aAYjDP,KAAKrC,MAAM2M,cACVpN,EAAA,0BACEA,EAAA,cAACC,EAAA,EAAD,CAASiG,MAAM,UACblG,EAAA,cAACC,EAAA,EAAD,CACE8F,QAAS,SAAAxF,GAAK,OAAI6C,EAAK+I,SAAS,CAAEC,qBAAsB7L,EAAMoM,iBAC9DnC,aAAW,gBACXxK,EAAA,cAACC,EAAA,EAAD,mBAGJD,EAAA,cAACC,EAAA,EAAD,CACE2M,SAAU9J,KAAKuJ,MAAMD,qBACrBS,KAAMC,QAAQhK,KAAKuJ,MAAMD,sBACzBW,QAAS,kBAAM3J,EAAK+I,SAAS,CAAEC,qBAAsB,SAErDpM,EAAA,cAACC,EAAA,EAAD,CAAUqB,IAAI,aAAayE,QAASjD,KAAKuK,WAAzC,mBAONrN,EAAA,cAAC6G,EAAD,CAAeV,QAASrD,KAAKrC,MAAM0F,SAAWrD,KAAKrC,MAAM0F,QAAQG,OAAO,SAAAnH,GAAO,OAAOA,EAAEG,0DAM5F,OACEU,EAAA,yBACG8C,KAAKrC,MAAM6M,cAAgBxK,KAAKrC,MAAM6M,aAAanG,OAAS,EACzDnH,EAAA,cAAC6G,EAAD,CAAeV,QAASrD,KAAKrC,MAAM0F,QAAQG,OAAO,SAAAnH,GAAO,OAAQA,EAAEG,gBAAkBH,EAAEE,aAAeF,EAAEI,oBAAqBoG,KAAM7C,KAAKrC,MAAM6M,eAC9IxK,KAAKyK,yDAMN,IACCnD,EAAYtH,KAAKrC,MAAjB2J,QACFlE,EAAQpD,KAAKrC,MAAM6M,cAAgBxK,KAAKrC,MAAM6M,aAAanG,OAAS,EAAIrE,KAAKrC,MAAMmH,aAAa4F,cAAcC,QAAQ,MAAO3K,KAAKrC,MAAM6M,aAAanG,QAAUrE,KAAKrC,MAAMyF,MAChL,OACElG,EAAA,cAACC,EAAA,EAAD,CAASoK,UAAWqD,IAAWtD,EAAQE,KAATuB,IAAA,GAAkBzB,EAAQuD,UAAY7K,KAAKrC,MAAM6M,cAAgBxK,KAAKrC,MAAM6M,aAAanG,OAAS,KAC9HnH,EAAA,qBAAKqK,UAAWD,EAAQlE,OACtBlG,EAAA,cAACC,EAAA,EAAD,CAAY2N,QAAQ,MAAM1H,IAE5BlG,EAAA,qBAAKqK,UAAWD,EAAQyD,SACxB7N,EAAA,qBAAKqK,UAAWD,EAAQjE,SACrBrD,KAAKsE,yBA/HYpD,aAsI5BwH,EAAcvH,aAAe,CAC3BkC,QAAS,GACT9C,QAAS,GACTqJ,eAAe,EACf9E,aAAc,GACd2E,QAAQ,EACRC,WAAY,GACZc,aAAc,GACdpH,MAAO,aAmBT,IAyBe2E,uBAzBA,SAAAC,GAAK,MAAK,CACvBR,KAAM,CACJwD,aAAchD,EAAMO,QAAQC,MAE9BqC,UACyB,UAAvB7C,EAAMG,QAAQnJ,KACV,CACAkJ,MAAOF,EAAMG,QAAQE,UAAU4C,KAC/BC,gBAAiBC,kBAAQnD,EAAMG,QAAQE,UAAU+C,MAAO,MAExD,CACAlD,MAAOF,EAAMG,QAAQC,KAAKxJ,QAC1BsM,gBAAiBlD,EAAMG,QAAQE,UAAUgD,MAE/CN,OAAQ,CACNO,KAAM,WAERjI,QAAS,CACP6E,MAAOF,EAAMG,QAAQC,KAAKC,WAE5BjF,MAAO,CACLkI,KAAM,cAIKvD,CAAmBW,63CC7L5B6C,eACJ,SAAAA,EAAY5N,GAAO,IAAAD,EAAAiL,IAAA3I,KAAAuL,GACjB7N,EAAAkL,IAAA5I,KAAA6I,IAAA0C,GAAAzC,KAAA9I,KAAMrC,IADWoL,IAAAC,QAAAtL,IAAA,gBA2DH,SAACmF,EAAMlF,GACrBkF,EAAOA,GAAQnF,EAAK6L,MAAM1G,KAClBnF,EAAK8N,WAEb,IAAI/G,EAAUO,IAAOnC,GA0FrB,GAvFInF,EAAK6L,QACP9E,EAAaA,EAAWjB,OAAO,SAAAiI,GAC7B,OAAI/N,EAAK6L,MAAMmC,uBAA+BD,EAAInO,UAAUmB,QACrDgN,EAAInO,YAGbI,EAAK6L,MAAMhJ,QAAQiD,OAAO,SAAAvG,GAAS,OAAIA,EAAUK,UAAUC,cAAaoO,QAAQ,SAAA1O,GAAa,IACnFmB,EAAmCnB,EAAnCmB,OAAQY,EAA2B/B,EAA3B+B,KAAM1B,EAAqBL,EAArBK,UAAWyC,EAAU9C,EAAV8C,MAG/B0E,EADErG,EACWqG,EAAWjB,OAAO,SAAAiI,GAC7B,OAAQnO,EAAUC,aACiB,IAAjCD,EAAUC,YAAY8G,QACtB/G,EAAUC,YAAYmB,QAAQ+M,EAAI1L,IAAU0L,EAAI1L,GAAOpB,aAAe,IAExD,YAATK,EACIyF,EAAWjB,OAAO,SAAAiI,GAC7B,OAAOA,EAAI1L,KAAWzC,EAAUC,cAEhB,YAATyB,GAAsB1B,EAAUC,YAC5BkH,EAAWjB,OAAO,SAAAiI,GAC7B,OAAQA,EAAI1L,IAAoC,YAA1BzC,EAAUC,cAC5BkO,EAAI1L,IAAoC,cAA1BzC,EAAUC,cAErB,CAAC,OAAQ,YAAY4C,SAASnB,GAC1ByF,EAAWjB,OAAO,SAAAiI,GAC7B,IAAMG,EAAcH,EAAI1L,GAAS,IAAIyB,KAAKiK,EAAI1L,IAAU,KAExD,GAAI6L,GAA0C,iBAA3BA,EAAYjN,WAA+B,CAC5D,IAAMkN,EAAevO,EAAUC,YAC3BuO,EAAuB,GACvBC,EAAwB,GAU5B,MARa,SAAT/M,GACF8M,EAAuBE,IAAWJ,EAAa,cAC/CG,EAAwBC,IAAWH,EAAc,eAC/B,aAAT7M,IACT8M,EAAuBE,IAAWJ,EAAa,sBAC/CG,EAAwBC,IAAWH,EAAc,uBAG5CC,IAAyBC,EAGlC,OAAO,IAES,SAAT/M,EACIyF,EAAWjB,OAAO,SAAAiI,GAC7B,IAAMQ,EAAcR,EAAI1L,IAAU,KAElC,GAAIkM,EAAa,CACf,IAAMC,EAAe5O,EAAUC,YAG/B,OAAO0O,IAFsBD,IAAWE,EAAc,SAKxD,OAAO,IAGIzH,EAAWjB,OAAO,SAAAiI,GAC7B,OAAOA,EAAI1L,IAAU0L,EAAI1L,GAAOpB,WAAWwN,cAAchM,SAAS7C,EAAUC,YAAY4O,oBAO5FzO,EAAK6L,OAAS7L,EAAK6L,MAAMG,aAC3BjF,EAAaA,EAAWjB,OAAO,SAAAiI,GAC7B,IAAIW,GAAS,EAYb,OAXA1O,EAAK6L,MAAMhJ,QACRiD,OAAO,SAAAvG,GAAe,YAAgC6B,IAAzB7B,EAAUoP,YAA4BpP,EAAUwG,OAASxG,EAAUoP,aAChGV,QAAQ,SAAA1O,GACP,GAAIA,EAAU8C,MAAO,CACnB,IAAM1C,EAAQK,EAAKgG,cAAc+H,EAAKxO,GAClCI,GAASA,EAAMsB,WAAWwN,cAAchM,SAASzC,EAAK6L,MAAMG,WAAWyC,iBACzEC,GAAS,MAKVA,KAKP1O,EAAK6L,OAAS7L,EAAK6L,MAAMxD,SAAW,GAAKrI,EAAK6L,MAAMtD,eAAgB,CACtE,IAAMhJ,EAAYS,EAAK6L,MAAMhJ,QAAQ+L,KAAK,SAAAC,GAAC,OAAIA,EAAEjP,UAAUO,KAAOH,EAAK6L,MAAMxD,UAC7EtB,EAAaA,EAAWmB,KACQ,SAA9BlI,EAAK6L,MAAMtD,eACP,SAAC5J,EAAGmQ,GAAJ,OAAU9O,EAAKkI,KAAKlI,EAAKgG,cAAc8I,EAAGvP,GAAYS,EAAKgG,cAAcrH,EAAGY,GAAYA,EAAU+B,OAClG,SAAC3C,EAAGmQ,GAAJ,OAAU9O,EAAKkI,KAAKlI,EAAKgG,cAAcrH,EAAGY,GAAYS,EAAKgG,cAAc8I,EAAGvP,GAAYA,EAAU+B,QAG1G,OAAOyF,GAAc5B,IAjKJkG,IAAAC,QAAAtL,IAAA,oBAqLC,WAClB,GAAIA,EAAKC,MAAM8O,kBAAmB,CAChC,IAAMjC,EAAe9M,EAAK6L,MAAM1G,KAAKW,OAAO,SAAAiI,GAAG,OAAIA,EAAInO,UAAUmB,UACjEf,EAAKC,MAAM8O,kBAAkBjC,MAxLdzB,IAAAC,QAAAtL,IAAA,eA4LJ,WAAa,IAAA2J,EAC1B3J,EAAKC,MAAMmJ,eAAgBO,EAAA3J,EAAKC,OAAMmJ,aAAX4F,MAAArF,EAAAsF,aA7LV5D,IAAAC,QAAAtL,IAAA,sBAgMG,WAAa,IAAAkP,EACjClP,EAAKC,MAAMkP,sBAAuBD,EAAAlP,EAAKC,OAAMkP,oBAAXH,MAAAE,EAAAD,aAjMjB5D,IAAAC,QAAAtL,IAAA,gBAoMH,WAAa,IAAAoP,EAC3BpP,EAAKC,MAAMuI,gBAAiB4G,EAAApP,EAAKC,OAAMuI,cAAXwG,MAAAI,EAAAH,aAlM5B,IAAMI,EAAkBrP,EAAK8N,SAAS7N,GAClCqP,GAA0B,EAC1BC,EAAuB,GALV,OAMbF,IAEFE,GADAD,EAAyBD,EAAgBxM,QAAQ2M,UAAU,SAAA7Q,GAAC,OAAIA,EAAE8Q,gBACjB,EAAIJ,EAAgBxM,QAAQyM,GAAwBG,YAAc,IAErHzP,EAAK6L,MAALhH,IAAA,CACEhC,QAAS,GACT6E,YAAa,EACbvC,KAAM,GACN+B,SAAUmI,EAAgB3Q,QAAQwI,SAClCH,WAAY,GACZiF,WAAY,GACZvD,cAAe,EACfJ,QAASiH,EACT/G,eAAgBgH,EAChBvB,wBAAwB,GACrBhO,EAAK0P,kBAAkBL,IArBXrP,gFAyBc2P,GAC/B,IAAMC,EAAiBtN,KAAKoN,kBAAkBpN,KAAKwL,SAAS6B,IAC5DrN,KAAKqJ,SAASiE,6CAGE3P,GAChB,IAAMkF,EAAOlF,EAAMkF,KAAK3E,IAAI,SAACuN,EAAK7I,GAEhC,OADA6I,EAAInO,UAAY,CAAEO,GAAI+E,GACf6I,IAST,MAAO,CAAE5I,OAAMtC,QANC5C,EAAM4C,QAAQrC,IAAI,SAACjB,EAAW2F,GAE5C,OADA3F,EAAUK,UAAY,CAAEO,GAAI+E,GACrB3F,IAIewH,WADLzE,KAAKuN,cAAc1K,EAAMlF,qCAIrCA,GACP,IAAMoP,EAAexK,IAAA,GAAS5E,GAASqC,KAAKrC,OAG5C,OAFAoP,EAAgB3Q,QAAhBmG,IAAA,GAA+BgJ,EAAcpK,aAAa/E,QAAY2Q,EAAgB3Q,SAE/E2Q,kCAGDlK,GACNA,EAAOA,GAAQ7C,KAAKuJ,MAAM1G,KAE1B,IAAM4B,EAAazE,KAAKuN,cAAc1K,GACtC7C,KAAKqJ,SAAS,CAAExG,OAAM4B,qDA4GVnD,EAASrE,GACrB,IAAII,EAAQiE,EAAQrE,EAAU8C,OAK9B,OAJI9C,EAAUmB,SACZf,EAAQJ,EAAUmB,OAAOf,IAGpBA,+BAGJhB,EAAGmQ,EAAGxN,GACT,MAAa,YAATA,EACK3C,EAAImQ,EAEJnQ,EAAImQ,GAAK,EAAInQ,EAAImQ,EAAI,EAAI,yCAuBrB,IAAAlM,EAAAN,KACPrC,EAAQqC,KAAKwL,WACnB,GAAI7N,EAAMvB,QAAQuI,OAChB,OACEzH,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CAAaP,MAAO,CAAEkH,QAAS,SAC7B5G,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAD,CACEP,MAAO,CAAEqC,MAAO,SAChB4F,QAAS,EACTsC,MAAOnH,KAAKuJ,MAAM9E,WAAWJ,OAC7B+C,YAAapH,KAAKuJ,MAAM3E,SACxB4I,mBAAoB7P,EAAMvB,QAAQqR,gBAClC1G,KAAM/G,KAAKuJ,MAAMnE,YACjB0B,aAAc,SAACrJ,EAAOsJ,GACpBzG,EAAK+I,SAAS,CAAEjE,YAAa2B,GAAQ,WACnCzG,EAAKoN,UACLpN,EAAKwG,aAAaC,MAGtB8F,oBAAqB,SAACpP,GACpB6C,EAAK+I,SAAS,SAAAE,GAGZ,OAFAA,EAAM3E,SAAWnH,EAAMK,OAAOT,MAC9BkM,EAAMnE,YAAc,EACbmE,GACN,WACDjJ,EAAKoN,UACLpN,EAAKuM,oBAAoBjI,aAG7B+I,iBAAkB7F,mDAU9B9H,KAAK0N,2CAGE,IAAAE,EAAA5N,KACDrC,EAAQqC,KAAKwL,WAEnB,OACEtO,EAAA,cAACC,EAAA,EAAD,KACGQ,EAAMvB,QAAQyR,SACb3Q,EAAA,cAAC4Q,EAAD,CACEzK,QAAS1F,EAAM0F,QACfmH,aAAcxK,KAAKuJ,MAAMpD,cAAgB,EAAInG,KAAKuJ,MAAM1G,KAAKW,OAAO,SAAAnH,GAAO,OAAOA,EAAEiB,UAAUmB,UAAa,GAC3G8B,QAASP,KAAKuJ,MAAMhJ,QACpBqJ,cAAejM,EAAMvB,QAAQwN,cAC7BU,aAAc3M,EAAMvB,QAAQkO,aAC5B7F,WAAYzE,KAAKuJ,MAAM9E,WACvBgF,OAAQ9L,EAAMvB,QAAQqN,OACtBC,WAAY1J,KAAKuJ,MAAMG,WACvBtG,MAAOzF,EAAMyF,MACbuG,gBAAiB,SAAAD,GAAU,OAAIkE,EAAKvE,SAAS,CAAEK,cAAc,kBAAMkE,EAAKF,aACxErD,iBAAkB,SAAA9J,GAAO,OAAIqN,EAAKvE,SAAS,CAAE9I,aAC7CuE,aAAYvC,IAAA,GAAOgJ,EAAcpK,aAAa2D,aAAiB9E,KAAKrC,MAAMmH,gBAG9E5H,EAAA,qBAAKN,MAAO,CAAEmR,UAAW,SACvB7Q,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAAC8Q,EAAD,CACElJ,aAAYvC,IAAA,GAAOgJ,EAAcpK,aAAa2D,aAAiB9E,KAAKrC,MAAMmH,cAC1EvE,QAASP,KAAKuJ,MAAMhJ,QACpBiG,aAAc7I,EAAMvB,QAAQE,UAC5B6J,cAAenG,KAAKuJ,MAAMpD,cAC1BC,UAAWpG,KAAKuJ,MAAM1G,KAAKwB,OAC3BqC,kBAAmB/I,EAAM0F,SAAW1F,EAAM0F,QAAQG,OAAOQ,EAAchE,KAAKrC,MAAMvB,UAAUiI,OAAS,EACrG0B,QAAS/F,KAAKuJ,MAAMxD,QACpBE,eAAgBjG,KAAKuJ,MAAMtD,eAC3BI,cAAe,SAAC5H,GACd,IAAMoE,EAAO+K,EAAKrE,MAAM9E,WAAWvG,IAAI,SAAAuN,GAErC,OADAA,EAAInO,UAAUmB,QAAUA,EACjBgN,IAEHtF,EAAgB1H,EAAUoE,EAAKwB,OAAS,EAC9CuJ,EAAKvE,SAAS,CAAE5E,WAAY5B,EAAMsD,iBAAiB,kBAAMyH,EAAKnB,uBAEhEvG,cAAe,SAACH,EAASE,GACvB2H,EAAKvE,SAAS,CAAEtD,UAASE,iBAAgBb,YAAa,GAAK,WACzDwI,EAAKF,UACLE,EAAK1H,cAAcH,EAASE,MAGhCU,mBAAoBhJ,EAAMvB,QAAQ0E,mBAClC+E,QAASlI,EAAMvB,QAAQyJ,UAEzB3I,EAAA,cAAC+Q,EAAD,CACE5K,QAAS1F,EAAM0F,QACfoB,WAAYzE,KAAKuJ,MAAM9E,WACvBW,YAAapF,KAAKuJ,MAAMnE,YACxBR,SAAU5E,KAAKuJ,MAAM3E,SACrBrE,QAASP,KAAKuJ,MAAMhJ,QACpBnE,QAASuB,EAAMvB,QACfsH,cAAe1D,KAAK0D,cACpB9F,gBAAiB,SAACsQ,EAAU7Q,GAC1B,IAAMkD,EAAUqN,EAAKrE,MAAMhJ,QAC3BA,EAAQ2N,GAAU5Q,UAAUC,YAAcF,EAC1CuQ,EAAKvE,SAAS,CAAE9I,WAAW,WACzBqN,EAAKF,aAGT/M,yBAA0B,SAAClD,GACzB,IAAMiO,EAAyBjO,EAAMK,OAAOW,QACtC8B,EAAUqN,EAAKrE,MAAMhJ,QAC3BqN,EAAKvE,SAAS,CAAE9I,UAASmL,0BAA0B,WACjDkC,EAAKF,aAGTxJ,cAAe,SAACzG,EAAOgB,GACrB,IAAMoE,EAAO+K,EAAKrE,MAAM1G,KACxBA,EAAKpF,EAAMK,OAAOT,OAAOC,UAAUmB,QAAUA,EAC7CmP,EAAKvE,SAAS,SAAAE,GAAK,MAAK,CACtB1G,KAAMA,EACNsD,cAAeoD,EAAMpD,eAAiB1H,EAAU,GAAK,KACnD,kBAAMmP,EAAKnB,sBACfmB,EAAKF,WAEP5I,aAAYvC,IAAA,GAAOgJ,EAAcpK,aAAa2D,aAAiB9E,KAAKrC,MAAMmH,kBAI/E9E,KAAKmO,uBAxUcjN,aA8U5BqK,GAAcpK,aAAe,CAC3BkC,QAAS,GACTiE,QAAS,GACT/G,QAAS,GACTsC,KAAM,GACNO,MAAO,cACPhH,QAAS,CACP0E,mBAAoB,EACpB8I,eAAe,EACfU,cAAc,EACd/E,WAAW,EACXZ,QAAQ,EACRC,SAAU,EACV6I,gBAAiB,CAAC,EAAG,GAAI,IACzBhE,QAAQ,EACRnN,WAAW,EACXuJ,SAAS,EACTgI,SAAS,EACTnJ,4BAA4B,GAE9BI,aAAc,CACZzB,QAAS,UACTqH,cAAe,sBACf3F,uBAAwB,0BAyDbwG","file":"static/js/docz-examples-example-actions~docz-examples-example-basic~docz-examples-example-cell-styling~docz-ex~15f56118.98ad22ec.js","sourcesContent":["\r\nexport default options => a => {\r\n    if (options.selection) {\r\n        return a.isRowAction;\r\n    } else {\r\n        return (!a.isFreeAction && !a.isSelectedAction) || (a.isRowAction);\r\n    }\r\n};","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  TableCell, TableRow, TextField,\r\n  FormControl, Select, Input,\r\n  MenuItem, Checkbox, ListItemText,\r\n  InputAdornment, Icon\r\n} from '@material-ui/core';\r\nimport DateFnsUtils from 'material-ui-pickers/utils/date-fns-utils';\r\nimport MuiPickersUtilsProvider from 'material-ui-pickers/MuiPickersUtilsProvider';\r\nimport TimePicker from 'material-ui-pickers/TimePicker';\r\nimport DatePicker from 'material-ui-pickers/DatePicker';\r\nimport DateTimePicker from 'material-ui-pickers/DateTimePicker';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nclass MTableFilterRow extends React.Component {\r\n  renderLookupFilter = (columnDef) => (\r\n    <FormControl style={{ width: '100%' }}>\r\n      <Select\r\n        multiple\r\n        value={columnDef.tableData.filterValue || []}\r\n        onChange={event => {\r\n          this.props.onFilterChanged(columnDef.tableData.id, event.target.value);\r\n        }}\r\n        input={<Input id=\"select-multiple-checkbox\" />}\r\n        renderValue={selecteds => selecteds.map(selected => columnDef.lookup[selected]).join(', ')}\r\n        MenuProps={MenuProps}\r\n      >\r\n        {\r\n          Object.keys(columnDef.lookup).map(key => (\r\n            <MenuItem key={key} value={key}>\r\n              <Checkbox checked={columnDef.tableData.filterValue && columnDef.tableData.filterValue.indexOf(key.toString()) > -1} />\r\n              <ListItemText primary={columnDef.lookup[key]} />\r\n            </MenuItem>\r\n          ))\r\n        }\r\n      </Select>\r\n    </FormControl>\r\n  )\r\n\r\n  renderBooleanFilter = (columnDef) => (\r\n    <Checkbox\r\n      indeterminate={columnDef.tableData.filterValue === undefined}\r\n      checked={columnDef.tableData.filterValue === 'checked'}\r\n      onChange={() => {\r\n        let val;\r\n        if (columnDef.tableData.filterValue === undefined) {\r\n          val = 'checked';\r\n        } else if (columnDef.tableData.filterValue === 'checked') {\r\n          val = 'unchecked';\r\n        }\r\n\r\n        this.props.onFilterChanged(columnDef.tableData.id, val);\r\n      }}\r\n    />\r\n  )\r\n\r\n  renderDefaultFilter = (columnDef) => (\r\n    <TextField\r\n      style={columnDef.type === 'numeric' ? { float: 'right' } : {}}\r\n      type={columnDef.type === 'numeric' ? 'number' : 'text'}\r\n      value={columnDef.tableData.filterValue}\r\n      onChange={(event) => { this.props.onFilterChanged(columnDef.tableData.id, event.target.value) }}\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <Icon>filter_list</Icon>\r\n          </InputAdornment>\r\n        )\r\n      }}\r\n    />\r\n  )\r\n\r\n  renderDateTypeFilter = (columnDef) => {\r\n    let dateInputElement = null;\r\n    const onDateInputChange = date => this.props.onFilterChanged(columnDef.tableData.id, date);\r\n\r\n    if (columnDef.type === 'date') {\r\n      dateInputElement = (\r\n        <DatePicker\r\n          value={columnDef.tableData.filterValue || null}\r\n          onChange={onDateInputChange}\r\n          clearable\r\n        />\r\n      );\r\n    } else if (columnDef.type === 'datetime') {\r\n      dateInputElement = (\r\n        <DateTimePicker\r\n          value={columnDef.tableData.filterValue || null}\r\n          onChange={onDateInputChange}\r\n          clearable\r\n        />\r\n      );\r\n    } else if (columnDef.type === 'time') {\r\n      dateInputElement = (\r\n        <TimePicker\r\n          value={columnDef.tableData.filterValue || null}\r\n          onChange={onDateInputChange}\r\n          clearable\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        {dateInputElement}\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n\r\n  getComponentForColumn(columnDef) {\r\n    if (columnDef.field) {\r\n      if (columnDef.lookup) {\r\n        return this.renderLookupFilter(columnDef);\r\n      } else if (columnDef.type === 'boolean') {\r\n        return this.renderBooleanFilter(columnDef);\r\n      } else if (['date', 'datetime', 'time'].includes(columnDef.type)) {\r\n        return this.renderDateTypeFilter(columnDef);\r\n      } else {\r\n        return this.renderDefaultFilter(columnDef);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const columns = this.props.columns.map(columnDef => (\r\n      <TableCell key={columnDef.tableData.id}>\r\n        {this.getComponentForColumn(columnDef)}\r\n      </TableCell>\r\n    ));\r\n\r\n    if (this.props.selection) {\r\n      columns.splice(0, 0, (\r\n        <TableCell style={{ padding: '0 12px' }}>\r\n          <Checkbox onChange={this.props.onFilterSelectionChanged} />\r\n        </TableCell>)\r\n      );\r\n    }\r\n    if (this.props.emptyCell && this.props.hasActions) {\r\n      if (this.props.actionsColumnIndex === -1) {\r\n        columns.push(<TableCell />);\r\n      } else {\r\n        let endPos = 0;\r\n        if (this.props.selection) {\r\n          endPos = 1;\r\n        }\r\n        columns.splice(this.props.actionsColumnIndex + endPos, 0, <TableCell />);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TableRow style={{ height: 10 }}>\r\n        {columns}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nMTableFilterRow.defaultProps = {\r\n  emptyCell: false,\r\n  columns: [],\r\n  selection: false,\r\n  hasActions: false,\r\n};\r\n\r\nMTableFilterRow.propTypes = {\r\n  emptyCell: PropTypes.bool,\r\n  columns: PropTypes.array.isRequired,\r\n  onFilterChanged: PropTypes.func.isRequired,\r\n  selection: PropTypes.bool.isRequired,\r\n  onFilterSelectionChanged: PropTypes.func.isRequired,\r\n  actionsColumnIndex: PropTypes.number,\r\n  hasActions: PropTypes.bool,\r\n};\r\n\r\nexport default MTableFilterRow;\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport { Icon, TableCell } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n/* eslint-enable no-unused-vars */\r\n\r\nexport default class MTableCell extends React.Component {\r\n  getRenderValue() {\r\n    if (this.props.columnDef.render) {\r\n      return this.props.columnDef.render(this.props.rowData);\r\n    } else if (this.props.columnDef.type === 'boolean') {\r\n      const style = { textAlign: 'center', width: '48px' };\r\n      if (this.props.value) {\r\n        return <Icon style={style}>check</Icon>;\r\n      } else {\r\n        return <Icon style={style}>remove</Icon>;\r\n      }\r\n    } else if (this.props.columnDef.type === 'date') {\r\n      if (this.props.value instanceof Date) {\r\n        return this.props.value.toLocaleDateString();\r\n      } else {\r\n        return this.props.value;\r\n      }\r\n    } else if (this.props.columnDef.type === 'time') {\r\n      if (this.props.value instanceof Date) {\r\n        return this.props.value.toLocaleTimeString();\r\n      } else {\r\n        return this.props.value;\r\n      }\r\n    } else if (this.props.columnDef.type === 'dateTime') {\r\n      if (this.props.value instanceof Date) {\r\n        return this.props.value.toLocaleString();\r\n      } else {\r\n        return this.props.value;\r\n      }\r\n    } else if (this.props.columnDef.type === 'currency') {\r\n      return this.getCurrencyValue(this.props.columnDef.currencySetting, this.props.value);\r\n    }\r\n\r\n    return this.props.value;\r\n  }\r\n\r\n  getCurrencyValue(currencySetting, value) {\r\n    if (currencySetting !== undefined) {\r\n      return new Intl.NumberFormat((currencySetting.locale !== undefined) ? currencySetting.locale : 'en-US',\r\n        {\r\n          style: 'currency',\r\n          currency: (currencySetting.currencyCode !== undefined) ? currencySetting.currencyCode : 'USD',\r\n          minimumFractionDigits: (currencySetting.minimumFractionDigits !== undefined) ? currencySetting.minimumFractionDigits : 2,\r\n          maximumFractionDigits: (currencySetting.maximumFractionDigits !== undefined) ? currencySetting.maximumFractionDigits : 2\r\n        }).format((value !== undefined) ? value : 0);\r\n    } else {\r\n      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format((value !== undefined) ? value : 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let cellStyle = {};\r\n    if (typeof this.props.columnDef.cellStyle === 'function') {\r\n      cellStyle = { ...cellStyle, ...this.props.columnDef.cellStyle(this.props.value) };\r\n    } else {\r\n      cellStyle = { ...cellStyle, ...this.props.columnDef.cellStyle };\r\n    }\r\n\r\n    return (\r\n      <TableCell style={cellStyle}\r\n        numeric={['numeric'].indexOf(this.props.columnDef.type) !== -1}\r\n      >\r\n        {this.getRenderValue()}\r\n      </TableCell>\r\n    );\r\n  }\r\n}\r\n\r\nMTableCell.defaultProps = {\r\n  columnDef: {},\r\n  value: ''\r\n};\r\n\r\nMTableCell.propTypes = {\r\n  columnDef: PropTypes.object.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  rowData: PropTypes.object\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, IconButton, Tooltip } from '@material-ui/core';\r\n/* eslint-enable no-unused-vars */\r\n\r\nclass MTableActions extends React.Component {\r\n  renderButton(action, index) {\r\n    if (typeof action === 'function') {\r\n      action = action(this.props.data);\r\n      if (!action) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const button = (\r\n      <IconButton\r\n        key={action.icon + '' + index}\r\n        disabled={action.disabled}\r\n        onClick={(event) => action.onClick && action.onClick(event, this.props.data)}\r\n      >\r\n        <Icon {...action.iconProps}>{action.icon}</Icon>\r\n      </IconButton>\r\n    );\r\n\r\n    if (action.tooltip && !action.disabled) {\r\n      return <Tooltip title={action.tooltip} key={action.tooltip + '' + index}>{button}</Tooltip>;\r\n    } else {\r\n      return button;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.actions) {\r\n      return this.props.actions.map((action, index) => (this.renderButton(action, index)));\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nMTableActions.defaultProps = {\r\n  actions: [],\r\n  data: {}\r\n};\r\n\r\nMTableActions.propTypes = {\r\n  actions: PropTypes.array.isRequired,\r\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object)])\r\n};\r\n\r\nexport default MTableActions;\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MTableCell from './m-table-cell';\r\nimport MTableActions from './m-table-actions';\r\nimport filterActions from './filter-actions';\r\nimport { Checkbox, TableRow, TableCell } from '@material-ui/core';\r\n/* eslint-enable no-unused-vars */\r\n\r\n\r\nexport default class MTableBodyRow extends React.Component {\r\n  renderColumns() {\r\n    const mapArr = this.props.columns.filter(columnDef => { return !columnDef.hidden })\r\n      .map((columnDef) => {\r\n        const value = this.props.getFieldValue(this.props.data, columnDef);\r\n        return <MTableCell columnDef={columnDef} value={value} key={columnDef.tableData.id} rowData={this.props.data} />;\r\n      });\r\n    return mapArr;\r\n  }\r\n\r\n  renderActions() {\r\n    return (\r\n      <TableCell style={{ paddingTop: 0, paddingBottom: 0 }} key=\"key-actions-column\">\r\n        <div style={{ display: 'flex' }}>\r\n          <MTableActions data={this.props.data} actions={this.props.actions.filter(filterActions(this.props.options))} />\r\n        </div>\r\n      </TableCell>\r\n    );\r\n  }\r\n  renderSelectionColumn() {\r\n    return (\r\n      <TableCell padding=\"checkbox\" key=\"key-selection-column\">\r\n        <Checkbox\r\n          checked={this.props.data.tableData.checked === true}\r\n          value={`${this.props.data.tableData.id}`}\r\n          onChange={this.props.onRowSelected}\r\n        />\r\n      </TableCell>\r\n    );\r\n  }\r\n  render() {\r\n    const columns = this.renderColumns();\r\n    if (this.props.options.selection) {\r\n      columns.splice(0, 0, this.renderSelectionColumn());\r\n    }\r\n    if (this.props.actions &&\r\n      this.props.actions.filter(filterActions(this.props.options)).length > 0) {\r\n      if (this.props.options.actionsColumnIndex === -1) {\r\n        columns.push(this.renderActions());\r\n      } else if (this.props.options.actionsColumnIndex >= 0) {\r\n        let endPos = 0;\r\n        if (this.props.options.selection) {\r\n          endPos = 1;\r\n        }\r\n        columns.splice(this.props.options.actionsColumnIndex + endPos, 0, this.renderActions());\r\n      }\r\n    }\r\n    return (\r\n      <TableRow selected={this.props.index % 2 === 0}>\r\n        {columns}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nMTableBodyRow.defaultProps = {\r\n  actions: [],\r\n  index: 0,\r\n  data: {},\r\n  options: {}\r\n};\r\n\r\nMTableBodyRow.propTypes = {\r\n  actions: PropTypes.array,\r\n  index: PropTypes.number.isRequired,\r\n  data: PropTypes.object.isRequired,\r\n  options: PropTypes.object.isRequired,\r\n  onRowSelected: PropTypes.func,\r\n  getFieldValue: PropTypes.func.isRequired,\r\n  columns: PropTypes.array,\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MTableFilterRow from './m-table-filter-row';\r\nimport MTableBodyRow from './m-table-body-row';\r\nimport filterActions from './filter-actions';\r\nimport { TableBody, TableRow, TableCell } from '@material-ui/core';\r\n/* eslint-enable no-unused-vars */\r\n\r\nexport default class MTableBody extends React.Component {\r\n  renderEmpty(emptyRowCount, renderData) {\r\n    if (this.props.options.showEmptyDataSourceMessage && renderData.length === 0) {\r\n      return (\r\n        <TableRow style={{ height: 49 * (this.props.options.paging ? this.props.pageSize : 1) }} key={'empty-' + 0} >\r\n          <TableCell style={{ paddingTop: 0, paddingBottom: 0, textAlign: 'center' }} colSpan={this.props.columns.length} key=\"empty-\">\r\n            {this.props.localization.emptyDataSourceMessage}\r\n          </TableCell>\r\n        </TableRow>\r\n      );\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          {[...Array(emptyRowCount)].map((r, index) => <TableRow style={{ height: 49 }} key={'empty-' + index} />)}\r\n          {emptyRowCount > 0 && <TableRow style={{ height: 1 }} key={'empty-last1'} />}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let renderData = this.props.renderData;\r\n    let emptyRowCount = 0;\r\n    if (this.props.options.paging) {\r\n      const startIndex = this.props.currentPage * this.props.pageSize;\r\n      const endIndex = startIndex + this.props.pageSize;\r\n      renderData = renderData.slice(startIndex, endIndex);\r\n      emptyRowCount = this.props.pageSize - renderData.length;\r\n    }\r\n    return (\r\n      <TableBody>\r\n        {this.props.options.filtering &&\r\n          <MTableFilterRow\r\n            columns={this.props.columns.filter(columnDef => { return !columnDef.hidden })}\r\n            emptyCell={this.props.options.selection || (this.props.actions && this.props.actions.filter(filterActions(this.props.options)).length > 0)}\r\n            hasActions={(this.props.actions && this.props.actions.filter(filterActions(this.props.options)).length > 0)}\r\n            actionsColumnIndex={this.props.options.actionsColumnIndex}\r\n            onFilterChanged={this.props.onFilterChanged}\r\n            selection={this.props.options.selection}\r\n            onFilterSelectionChanged={this.props.onFilterSelectionChanged}\r\n          />\r\n        }\r\n        {\r\n          renderData.map((data, index) => {\r\n            return (\r\n              <MTableBodyRow\r\n                data={data}\r\n                index={index}\r\n                key={index}\r\n                options={this.props.options}\r\n                onRowSelected={this.props.onRowSelected}\r\n                actions={this.props.actions}\r\n                columns={this.props.columns}\r\n                getFieldValue={this.props.getFieldValue}\r\n              />\r\n            );\r\n          })\r\n        }\r\n        {this.renderEmpty(emptyRowCount, renderData)}\r\n      </TableBody>\r\n    );\r\n  }\r\n}\r\n\r\nMTableBody.defaultProps = {\r\n  actions: [],\r\n  currentPage: 0,\r\n  pageSize: 5,\r\n  renderData: [],\r\n  selection: false,\r\n  localization: {}\r\n};\r\n\r\nMTableBody.propTypes = {\r\n  actions: PropTypes.array,\r\n  columns: PropTypes.array.isRequired,\r\n  currentPage: PropTypes.number,\r\n  getFieldValue: PropTypes.func.isRequired,\r\n  onRowSelected: PropTypes.func,\r\n  options: PropTypes.object.isRequired,\r\n  pageSize: PropTypes.number,\r\n  renderData: PropTypes.array,\r\n  selection: PropTypes.bool.isRequired,\r\n  onFilterSelectionChanged: PropTypes.func.isRequired,\r\n  localization: PropTypes.object,\r\n  onFilterChanged: PropTypes.func\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  TableHead, TableRow, TableCell,\r\n  TableSortLabel, Checkbox, withStyles\r\n} from '@material-ui/core';\r\n/* eslint-enable no-unused-vars */\r\n\r\nclass MTableHeader extends React.Component {\r\n  renderHeader() {\r\n    const mapArr = this.props.columns.filter(columnDef => { return !columnDef.hidden })\r\n      .map((columnDef) => (\r\n        <TableCell\r\n          key={columnDef.tableData.id}\r\n          numeric={['numeric'].indexOf(columnDef.type) !== -1}\r\n        >\r\n          {(columnDef.sort !== false && columnDef.sorting !== false && this.props.sorting)\r\n            ? <TableSortLabel\r\n              active={this.props.orderBy === columnDef.tableData.id}\r\n              direction={this.props.orderDirection || 'asc'}\r\n              onClick={() => {\r\n                const orderDirection = columnDef.tableData.id !== this.props.orderBy ? 'asc' : this.props.orderDirection === 'asc' ? 'desc' : 'asc';\r\n                this.props.onOrderChange(columnDef.tableData.id, orderDirection);\r\n              }}\r\n            >\r\n              {columnDef.title}\r\n            </TableSortLabel>\r\n            : columnDef.title\r\n          }\r\n        </TableCell>\r\n      ));\r\n    return mapArr;\r\n  }\r\n\r\n  renderActionsHeader() {\r\n    return (\r\n      <TableCell key=\"key-actions-column\">\r\n        <TableSortLabel>{this.props.localization.actions}</TableSortLabel>\r\n      </TableCell>\r\n    );\r\n  }\r\n  renderSelectionHeader() {\r\n    return (\r\n      <TableCell padding=\"checkbox\" key=\"key-selection-column\">\r\n        <Checkbox\r\n          indeterminate={this.props.selectedCount > 0 && this.props.selectedCount < this.props.dataCount}\r\n          checked={this.props.selectedCount === this.props.dataCount}\r\n          onChange={(event, checked) => this.props.onAllSelected && this.props.onAllSelected(checked)}\r\n        />\r\n      </TableCell>\r\n    );\r\n  }\r\n  render() {\r\n    const headers = this.renderHeader();\r\n    if (this.props.hasSelection) {\r\n      headers.splice(0, 0, this.renderSelectionHeader());\r\n    }\r\n\r\n    if (this.props.showActionsColumn) {\r\n      if (this.props.actionsHeaderIndex >= 0) {\r\n        let endPos = 0;\r\n        if (this.props.hasSelection) {\r\n          endPos = 1;\r\n        }\r\n        headers.splice(this.props.actionsHeaderIndex + endPos, 0, this.renderActionsHeader());\r\n      } else if (this.props.actionsHeaderIndex === -1) {\r\n        headers.push(this.renderActionsHeader());\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headers}\r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n}\r\n\r\nMTableHeader.defaultProps = {\r\n  dataCount: 0,\r\n  hasSelection: false,\r\n  selectedCount: 0,\r\n  sorting: true,\r\n  localization: {},\r\n  orderBy: undefined,\r\n  orderDirection: 'asc',\r\n  actionsHeaderIndex: 0\r\n};\r\n\r\nMTableHeader.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  dataCount: PropTypes.number,\r\n  hasSelection: PropTypes.bool,\r\n  localization: PropTypes.object,\r\n  selectedCount: PropTypes.number,\r\n  sorting: PropTypes.bool,\r\n  onAllSelected: PropTypes.func,\r\n  onOrderChange: PropTypes.func,\r\n  orderBy: PropTypes.number,\r\n  orderDirection: PropTypes.string,\r\n  actionsHeaderIndex: PropTypes.number,\r\n  showActionsColumn: PropTypes.bool,\r\n};\r\n\r\nexport default MTableHeader;\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Icon, IconButton,\r\n  TableFooter, TableRow, TablePagination,\r\n  Typography, withStyles\r\n} from '@material-ui/core';\r\n/* eslint-enable no-unused-vars */\r\n\r\nclass MTablePaginationInner extends React.Component {\r\n  handleFirstPageButtonClick = event => {\r\n    this.props.onChangePage(event, 0);\r\n  };\r\n\r\n  handleBackButtonClick = event => {\r\n    this.props.onChangePage(event, this.props.page - 1);\r\n  };\r\n\r\n  handleNextButtonClick = event => {\r\n    this.props.onChangePage(event, this.props.page + 1);\r\n  };\r\n\r\n  handleLastPageButtonClick = event => {\r\n    this.props.onChangePage(\r\n      event,\r\n      Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classes, count, page, rowsPerPage } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <IconButton\r\n          onClick={this.handleFirstPageButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"First Page\"\r\n        >\r\n          <Icon>first_page</Icon>\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={this.handleBackButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"Previous Page\"\r\n        >\r\n          <Icon>chevron_left</Icon>\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={this.handleNextButtonClick}\r\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n          aria-label=\"Next Page\"\r\n        >\r\n          <Icon>chevron_right</Icon>\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={this.handleLastPageButtonClick}\r\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n          aria-label=\"Last Page\"\r\n        >\r\n          <Icon>last_page</Icon>\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst actionsStyles = theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n    marginLeft: theme.spacing.unit * 2.5\r\n  }\r\n});\r\n\r\nMTablePaginationInner.propTypes = {\r\n  onChangePage: PropTypes.func,\r\n  page: PropTypes.number,\r\n  count: PropTypes.number,\r\n  rowsPerPage: PropTypes.number,\r\n  classes: PropTypes.object\r\n};\r\n\r\nconst MTablePagination = withStyles(actionsStyles, { withTheme: true })(MTablePaginationInner);\r\n\r\nexport default MTablePagination;\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport MTableActions from './m-table-actions';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Icon, IconButton, Menu,\r\n  MenuItem, Toolbar, Tooltip,\r\n  Typography, withStyles, Checkbox,\r\n  FormControlLabel, TextField, InputAdornment\r\n} from '@material-ui/core';\r\nimport { CsvBuilder } from 'filefy';\r\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\r\n/* eslint-enable no-unused-vars */\r\n\r\nclass MTableToolbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columnsButtonAnchorEl: null,\r\n      exportButtonAnchorEl: null\r\n    };\r\n  }\r\n\r\n  exportCsv = () => {\r\n    const columns = this.props.columns\r\n      .filter(columnDef => {\r\n        return !columnDef.hidden && columnDef.field;\r\n      });\r\n\r\n    const data = this.props.renderData.map(rowData =>\r\n      columns.map(columnDef => rowData[columnDef.field])\r\n    );\r\n\r\n    const builder = new CsvBuilder((this.props.title || 'data') + '.csv') // eslint-disable-line no-unused-vars\r\n      .setColumns(columns.map(columnDef => columnDef.title))\r\n      .addRows(data)\r\n      .exportFile();\r\n\r\n    this.setState({ exportButtonAnchorEl: null });\r\n  }\r\n\r\n  renderDefaultActions() {\r\n    return (\r\n      <div>\r\n        {this.props.search &&\r\n          <TextField\r\n            value={this.props.searchText}\r\n            onChange={event => this.props.onSearchChanged(event.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <Icon>search</Icon>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        }\r\n        {this.props.columnsButton &&\r\n          <span>\r\n            <Tooltip title=\"Show Columns\">\r\n              <IconButton\r\n                onClick={event => this.setState({ columnsButtonAnchorEl: event.currentTarget }) }\r\n                aria-label=\"Show Columns\">\r\n                <Icon>view_column</Icon>\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              anchorEl={this.state.columnsButtonAnchorEl}\r\n              open={Boolean(this.state.columnsButtonAnchorEl)}\r\n              onClose={() => this.setState({ columnsButtonAnchorEl: null }) }>\r\n              {\r\n                this.props.columns.map((col, index) => {\r\n                  return (\r\n                    <MenuItem key={col.tableData.id}>\r\n                      <FormControlLabel\r\n                        label={col.title}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={!col.hidden}\r\n                            onChange={(event, checked) => {\r\n                              const columns = this.props.columns;\r\n                              columns[index].hidden = !checked;\r\n                              this.props.onColumnsChanged(columns);\r\n                            }\r\n                            }/>\r\n                        }\r\n                      />\r\n                    </MenuItem>\r\n                  );\r\n                })\r\n              }\r\n            </Menu>\r\n          </span>\r\n        }\r\n        {this.props.exportButton &&\r\n          <span>\r\n            <Tooltip title=\"Export\">\r\n              <IconButton\r\n                onClick={event => this.setState({ exportButtonAnchorEl: event.currentTarget }) }\r\n                aria-label=\"Show Columns\">\r\n                <Icon>save_alt</Icon>\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              anchorEl={this.state.exportButtonAnchorEl}\r\n              open={Boolean(this.state.exportButtonAnchorEl)}\r\n              onClose={() => this.setState({ exportButtonAnchorEl: null })}\r\n            >\r\n              <MenuItem key=\"export-csv\" onClick={this.exportCsv}>\r\n                Export as CSV\r\n              </MenuItem>\r\n            </Menu>\r\n          </span>\r\n\r\n        }\r\n        <MTableActions actions={this.props.actions && this.props.actions.filter(a => { return a.isFreeAction })}/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderActions() {\r\n    return (\r\n      <div>\r\n        {this.props.selectedRows && this.props.selectedRows.length > 0\r\n          ? <MTableActions actions={this.props.actions.filter(a => { return !a.isFreeAction && (!a.isRowAction || a.isSelectedAction)})} data={this.props.selectedRows}/>\r\n          : this.renderDefaultActions()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const title = this.props.selectedRows && this.props.selectedRows.length > 0 ? this.props.localization.nRowsSelected.replace('{0}', this.props.selectedRows.length) : this.props.title;\r\n    return (\r\n      <Toolbar className={classNames(classes.root, { [classes.highlight]: this.props.selectedRows && this.props.selectedRows.length > 0 })}>\r\n        <div className={classes.title}>\r\n          <Typography variant=\"h6\">{title}</Typography>\r\n        </div>\r\n        <div className={classes.spacer} />\r\n        <div className={classes.actions}>\r\n          {this.renderActions()}\r\n        </div>\r\n      </Toolbar>\r\n    );\r\n  }\r\n}\r\n\r\nMTableToolbar.defaultProps = {\r\n  actions: [],\r\n  columns: [],\r\n  columnsButton: false,\r\n  localization: {},\r\n  search: true,\r\n  searchText: '',\r\n  selectedRows: [],\r\n  title: 'No Title!'\r\n};\r\n\r\nMTableToolbar.propTypes = {\r\n  actions: PropTypes.array,\r\n  columns: PropTypes.array,\r\n  columnsButton: PropTypes.bool,\r\n  localization: PropTypes.object.isRequired,\r\n  onColumnsChanged: PropTypes.func.isRequired,\r\n  onSearchChanged: PropTypes.func.isRequired,\r\n  search: PropTypes.bool.isRequired,\r\n  searchText: PropTypes.string.isRequired,\r\n  selectedRows: PropTypes.array,\r\n  title: PropTypes.string.isRequired,\r\n  renderData: PropTypes.func,\r\n  exportButton: PropTypes.bool,\r\n  classes: PropTypes.object\r\n};\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    paddingRight: theme.spacing.unit\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85)\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark\r\n      },\r\n  spacer: {\r\n    flex: '1 1 10%'\r\n  },\r\n  actions: {\r\n    color: theme.palette.text.secondary\r\n  },\r\n  title: {\r\n    flex: '0 0 auto'\r\n  }\r\n});\r\n\r\nexport default withStyles(styles)(MTableToolbar);\r\n","/* eslint-disable no-unused-vars */\r\nimport { Paper, Table, TableFooter, TablePagination, TableRow } from '@material-ui/core';\r\nimport formatDate from 'date-fns/format';\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport filterActions from './filter-actions';\r\nimport MTableBody from './m-table-body';\r\nimport MTableHeader from './m-table-header';\r\nimport MTablePagination from './m-table-pagination';\r\nimport MTableToolbar from './m-table-toolbar';\r\n/* eslint-enable no-unused-vars */\r\n\r\nclass MaterialTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const calculatedProps = this.getProps(props);\r\n    let defaultSortColumnIndex = -1;\r\n    let defaultSortDirection = '';\r\n    if (calculatedProps) {\r\n      defaultSortColumnIndex = calculatedProps.columns.findIndex(a => a.defaultSort);\r\n      defaultSortDirection = defaultSortColumnIndex > -1 ? calculatedProps.columns[defaultSortColumnIndex].defaultSort : '';\r\n    }\r\n    this.state = {\r\n      columns: [],\r\n      currentPage: 0,\r\n      data: [],\r\n      pageSize: calculatedProps.options.pageSize,\r\n      renderData: [],\r\n      searchText: '',\r\n      selectedCount: 0,\r\n      orderBy: defaultSortColumnIndex,\r\n      orderDirection: defaultSortDirection,\r\n      filterSelectionChecked: false,\r\n      ...this.getDataAndColumns(calculatedProps)\r\n    };\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    const dataAndColumns = this.getDataAndColumns(this.getProps(nextProps));\r\n    this.setState(dataAndColumns);\r\n  }\r\n\r\n  getDataAndColumns(props) {\r\n    const data = props.data.map((row, index) => {\r\n      row.tableData = { id: index };\r\n      return row;\r\n    });\r\n\r\n    const columns = props.columns.map((columnDef, index) => {\r\n      columnDef.tableData = { id: index };\r\n      return columnDef;\r\n    });\r\n\r\n    const renderData = this.getRenderData(data, props);\r\n    return { data, columns, renderData };\r\n  }\r\n\r\n  getProps(props) {\r\n    const calculatedProps = { ...(props || this.props) };\r\n    calculatedProps.options = { ...MaterialTable.defaultProps.options, ...calculatedProps.options };\r\n\r\n    return calculatedProps;\r\n  }\r\n\r\n  setData(data) {\r\n    data = data || this.state.data;\r\n\r\n    const renderData = this.getRenderData(data);\r\n    this.setState({ data, renderData });\r\n  }\r\n\r\n  getRenderData = (data, props) => {\r\n    data = data || this.state.data;\r\n    props = this.getProps();\r\n\r\n    let renderData = [...data];\r\n\r\n    // App filter\r\n    if (this.state) {\r\n      renderData = renderData.filter(row => {\r\n        if (this.state.filterSelectionChecked) return row.tableData.checked;\r\n        return row.tableData;\r\n      });\r\n\r\n      this.state.columns.filter(columnDef => columnDef.tableData.filterValue).forEach(columnDef => {\r\n        const { lookup, type, tableData, field } = columnDef;\r\n\r\n        if (lookup) {\r\n          renderData = renderData.filter(row => {\r\n            return !tableData.filterValue ||\r\n              tableData.filterValue.length === 0 ||\r\n              tableData.filterValue.indexOf(row[field] && row[field].toString()) > -1;\r\n          });\r\n        } else if (type === 'numeric') {\r\n          renderData = renderData.filter(row => {\r\n            return row[field] === tableData.filterValue;\r\n          });\r\n        } else if (type === 'boolean' && tableData.filterValue) {\r\n          renderData = renderData.filter(row => {\r\n            return (row[field] && tableData.filterValue === 'checked') ||\r\n              (!row[field] && tableData.filterValue === 'unchecked');\r\n          });\r\n        } else if (['date', 'datetime'].includes(type)) {\r\n          renderData = renderData.filter(row => {\r\n            const currentDate = row[field] ? new Date(row[field]) : null;\r\n\r\n            if (currentDate && currentDate.toString() !== 'Invalid Date') {\r\n              const selectedDate = tableData.filterValue;\r\n              let currentDateToCompare = '';\r\n              let selectedDateToCompare = '';\r\n\r\n              if (type === 'date') {\r\n                currentDateToCompare = formatDate(currentDate, 'MM/dd/yyyy');\r\n                selectedDateToCompare = formatDate(selectedDate, 'MM/dd/yyyy');\r\n              } else if (type === 'datetime') {\r\n                currentDateToCompare = formatDate(currentDate, 'MM/dd/yyyy - HH:mm');\r\n                selectedDateToCompare = formatDate(selectedDate, 'MM/dd/yyyy - HH:mm');\r\n              }\r\n\r\n              return currentDateToCompare === selectedDateToCompare;\r\n            }\r\n\r\n            return true;\r\n          });\r\n        } else if (type === 'time') {\r\n          renderData = renderData.filter(row => {\r\n            const currentHour = row[field] || null;\r\n\r\n            if (currentHour) {\r\n              const selectedHour = tableData.filterValue;\r\n              const currentHourToCompare = formatDate(selectedHour, 'HH:mm');\r\n\r\n              return currentHour === currentHourToCompare;\r\n            }\r\n\r\n            return true;\r\n          });\r\n        } else {\r\n          renderData = renderData.filter(row => {\r\n            return row[field] && row[field].toString().toUpperCase().includes(tableData.filterValue.toUpperCase());\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Apply Search\r\n    if (this.state && this.state.searchText) {\r\n      renderData = renderData.filter(row => {\r\n        let result = false;\r\n        this.state.columns\r\n          .filter(columnDef => { return columnDef.searchable === undefined ? !columnDef.hidden : columnDef.searchable })\r\n          .forEach(columnDef => {\r\n            if (columnDef.field) {\r\n              const value = this.getFieldValue(row, columnDef);\r\n              if (value && value.toString().toUpperCase().includes(this.state.searchText.toUpperCase())) {\r\n                result = true;\r\n              }\r\n            }\r\n          });\r\n\r\n        return result;\r\n      });\r\n    }\r\n\r\n    // Apply Sorting\r\n    if (this.state && this.state.orderBy >= 0 && this.state.orderDirection) {\r\n      const columnDef = this.state.columns.find(_ => _.tableData.id === this.state.orderBy);\r\n      renderData = renderData.sort(\r\n        this.state.orderDirection === 'desc'\r\n          ? (a, b) => this.sort(this.getFieldValue(b, columnDef), this.getFieldValue(a, columnDef), columnDef.type)\r\n          : (a, b) => this.sort(this.getFieldValue(a, columnDef), this.getFieldValue(b, columnDef), columnDef.type)\r\n      );\r\n    }\r\n    return renderData || data;\r\n  }\r\n\r\n  getFieldValue(rowData, columnDef) {\r\n    let value = rowData[columnDef.field];\r\n    if (columnDef.lookup) {\r\n      value = columnDef.lookup[value];\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  sort(a, b, type) {\r\n    if (type === 'numeric') {\r\n      return a - b;\r\n    } else {\r\n      return a < b ? -1 : a > b ? 1 : 0;\r\n    }\r\n  }\r\n\r\n  onSelectionChange = () => {\r\n    if (this.props.onSelectionChange) {\r\n      const selectedRows = this.state.data.filter(row => row.tableData.checked);\r\n      this.props.onSelectionChange(selectedRows);\r\n    }\r\n  }\r\n\r\n  onChangePage = (...args) => {\r\n    this.props.onChangePage && this.props.onChangePage(...args);\r\n  }\r\n\r\n  onChangeRowsPerPage = (...args) => {\r\n    this.props.onChangeRowsPerPage && this.props.onChangeRowsPerPage(...args);\r\n  }\r\n\r\n  onOrderChange = (...args) => {\r\n    this.props.onOrderChange && this.props.onOrderChange(...args);\r\n  }\r\n\r\n  renderFooter() {\r\n    const props = this.getProps();\r\n    if (props.options.paging) {\r\n      return (\r\n        <Table>\r\n          <TableFooter style={{ display: 'grid' }}>\r\n            <TableRow>\r\n              <TablePagination\r\n                style={{ float: 'right' }}\r\n                colSpan={3}\r\n                count={this.state.renderData.length}\r\n                rowsPerPage={this.state.pageSize}\r\n                rowsPerPageOptions={props.options.pageSizeOptions}\r\n                page={this.state.currentPage}\r\n                onChangePage={(event, page) => {\r\n                  this.setState({ currentPage: page }, () => {\r\n                    this.setData();\r\n                    this.onChangePage(page);\r\n                  });\r\n                }}\r\n                onChangeRowsPerPage={(event) => {\r\n                  this.setState(state => {\r\n                    state.pageSize = event.target.value;\r\n                    state.currentPage = 0;\r\n                    return state;\r\n                  }, () => {\r\n                    this.setData();\r\n                    this.onChangeRowsPerPage(pageSize);\r\n                  });\r\n                }}\r\n                ActionsComponent={MTablePagination}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setData();\r\n  }\r\n\r\n  render() {\r\n    const props = this.getProps();\r\n\r\n    return (\r\n      <Paper>\r\n        {props.options.toolbar &&\r\n          <MTableToolbar\r\n            actions={props.actions}\r\n            selectedRows={this.state.selectedCount > 0 ? this.state.data.filter(a => { return a.tableData.checked }) : []}\r\n            columns={this.state.columns}\r\n            columnsButton={props.options.columnsButton}\r\n            exportButton={props.options.exportButton}\r\n            renderData={this.state.renderData}\r\n            search={props.options.search}\r\n            searchText={this.state.searchText}\r\n            title={props.title}\r\n            onSearchChanged={searchText => this.setState({ searchText }, () => this.setData())}\r\n            onColumnsChanged={columns => this.setState({ columns })}\r\n            localization={{ ...MaterialTable.defaultProps.localization, ...this.props.localization }}\r\n          />\r\n        }\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <Table>\r\n            <MTableHeader\r\n              localization={{ ...MaterialTable.defaultProps.localization, ...this.props.localization }}\r\n              columns={this.state.columns}\r\n              hasSelection={props.options.selection}\r\n              selectedCount={this.state.selectedCount}\r\n              dataCount={this.state.data.length}\r\n              showActionsColumn={props.actions && props.actions.filter(filterActions(this.props.options)).length > 0}\r\n              orderBy={this.state.orderBy}\r\n              orderDirection={this.state.orderDirection}\r\n              onAllSelected={(checked) => {\r\n                const data = this.state.renderData.map(row => {\r\n                  row.tableData.checked = checked;\r\n                  return row;\r\n                });\r\n                const selectedCount = checked ? data.length : 0;\r\n                this.setState({ renderData: data, selectedCount }, () => this.onSelectionChange());\r\n              }}\r\n              onOrderChange={(orderBy, orderDirection) => {\r\n                this.setState({ orderBy, orderDirection, currentPage: 0 }, () => {\r\n                  this.setData();\r\n                  this.onOrderChange(orderBy, orderDirection);\r\n                });\r\n              }}\r\n              actionsHeaderIndex={props.options.actionsColumnIndex}\r\n              sorting={props.options.sorting}\r\n            />\r\n            <MTableBody\r\n              actions={props.actions}\r\n              renderData={this.state.renderData}\r\n              currentPage={this.state.currentPage}\r\n              pageSize={this.state.pageSize}\r\n              columns={this.state.columns}\r\n              options={props.options}\r\n              getFieldValue={this.getFieldValue}\r\n              onFilterChanged={(columnId, value) => {\r\n                const columns = this.state.columns;\r\n                columns[columnId].tableData.filterValue = value;\r\n                this.setState({ columns }, () => {\r\n                  this.setData();\r\n                });\r\n              }}\r\n              onFilterSelectionChanged={(event) => {\r\n                const filterSelectionChecked = event.target.checked;\r\n                const columns = this.state.columns;\r\n                this.setState({ columns, filterSelectionChecked }, () => {\r\n                  this.setData();\r\n                });\r\n              }}\r\n              onRowSelected={(event, checked) => {\r\n                const data = this.state.data;\r\n                data[event.target.value].tableData.checked = checked;\r\n                this.setState(state => ({\r\n                  data: data,\r\n                  selectedCount: state.selectedCount + (checked ? 1 : -1)\r\n                }), () => this.onSelectionChange());\r\n                this.setData();\r\n              }}\r\n              localization={{ ...MaterialTable.defaultProps.localization, ...this.props.localization }}\r\n            />\r\n          </Table>\r\n        </div>\r\n        {this.renderFooter()}\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nMaterialTable.defaultProps = {\r\n  actions: [],\r\n  classes: {},\r\n  columns: [],\r\n  data: [],\r\n  title: 'Table Title',\r\n  options: {\r\n    actionsColumnIndex: 0,\r\n    columnsButton: false,\r\n    exportButton: false,\r\n    filtering: false,\r\n    paging: true,\r\n    pageSize: 5,\r\n    pageSizeOptions: [5, 10, 20],\r\n    search: true,\r\n    selection: false,\r\n    sorting: true,\r\n    toolbar: true,\r\n    showEmptyDataSourceMessage: true\r\n  },\r\n  localization: {\r\n    actions: 'Actions',\r\n    nRowsSelected: '{0} row(s) selected',\r\n    emptyDataSourceMessage: 'No records to display'\r\n  }\r\n};\r\n\r\nMaterialTable.propTypes = {\r\n  actions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\r\n    icon: PropTypes.string.isRequired,\r\n    isFreeAction: PropTypes.bool,\r\n    tooltip: PropTypes.string,\r\n    onClick: PropTypes.func.isRequired,\r\n    iconProps: PropTypes.object\r\n  })])),\r\n  columns: PropTypes.arrayOf(PropTypes.shape({\r\n    cellStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n    hidden: PropTypes.bool,\r\n    field: PropTypes.string,\r\n    lookup: PropTypes.object,\r\n    render: PropTypes.func,\r\n    sorting: PropTypes.bool,\r\n    defaultSort: PropTypes.oneOf(['asc', 'desc']),\r\n    title: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf(['boolean', 'numeric', 'date', 'datetime', 'time']),\r\n    searchable: PropTypes.bool,\r\n    currencySetting: PropTypes.shape({\r\n      locale: PropTypes.string,\r\n      currencyCode: PropTypes.string,\r\n      minimumFractionDigits: PropTypes.number,\r\n      maximumFractionDigits: PropTypes.number\r\n    })\r\n  })).isRequired,\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  title: PropTypes.string,\r\n  options: PropTypes.shape({\r\n    actionsColumnIndex: PropTypes.number,\r\n    columnsButton: PropTypes.bool,\r\n    exportButton: PropTypes.bool,\r\n    filtering: PropTypes.bool,\r\n    paging: PropTypes.bool,\r\n    pageSize: PropTypes.number,\r\n    pageSizeOptions: PropTypes.arrayOf(PropTypes.number),\r\n    search: PropTypes.bool,\r\n    selection: PropTypes.bool,\r\n    sorting: PropTypes.bool,\r\n    toolbar: PropTypes.bool,\r\n    showEmptyDataSourceMessage: PropTypes.bool\r\n  }),\r\n  localization: PropTypes.shape({\r\n    actions: PropTypes.string,\r\n    nRowsSelected: PropTypes.string,\r\n    emptyDataSourceMessage: PropTypes.string\r\n  }),\r\n  onSelectionChange: PropTypes.func,\r\n  onChangeRowsPerPage: PropTypes.func,\r\n  onChangePage: PropTypes.func,\r\n  onOrderChange: PropTypes.func,\r\n};\r\n\r\nexport default MaterialTable;\r\n"],"sourceRoot":""}